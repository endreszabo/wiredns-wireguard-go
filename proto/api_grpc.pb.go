// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventEmitter_Emit_FullMethodName = "/y7_wiredns_sensor_v1.EventEmitter/Emit"
)

// EventEmitterClient is the client API for EventEmitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventEmitterClient interface {
	Emit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventEmitter_EmitClient, error)
}

type eventEmitterClient struct {
	cc grpc.ClientConnInterface
}

func NewEventEmitterClient(cc grpc.ClientConnInterface) EventEmitterClient {
	return &eventEmitterClient{cc}
}

func (c *eventEmitterClient) Emit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventEmitter_EmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventEmitter_ServiceDesc.Streams[0], EventEmitter_Emit_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventEmitterEmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventEmitter_EmitClient interface {
	Recv() (*PeerSeenEvent, error)
	grpc.ClientStream
}

type eventEmitterEmitClient struct {
	grpc.ClientStream
}

func (x *eventEmitterEmitClient) Recv() (*PeerSeenEvent, error) {
	m := new(PeerSeenEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventEmitterServer is the server API for EventEmitter service.
// All implementations must embed UnimplementedEventEmitterServer
// for forward compatibility
type EventEmitterServer interface {
	Emit(*emptypb.Empty, EventEmitter_EmitServer) error
	mustEmbedUnimplementedEventEmitterServer()
}

// UnimplementedEventEmitterServer must be embedded to have forward compatible implementations.
type UnimplementedEventEmitterServer struct {
}

func (UnimplementedEventEmitterServer) Emit(*emptypb.Empty, EventEmitter_EmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedEventEmitterServer) mustEmbedUnimplementedEventEmitterServer() {}

// UnsafeEventEmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventEmitterServer will
// result in compilation errors.
type UnsafeEventEmitterServer interface {
	mustEmbedUnimplementedEventEmitterServer()
}

func RegisterEventEmitterServer(s grpc.ServiceRegistrar, srv EventEmitterServer) {
	s.RegisterService(&EventEmitter_ServiceDesc, srv)
}

func _EventEmitter_Emit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventEmitterServer).Emit(m, &eventEmitterEmitServer{stream})
}

type EventEmitter_EmitServer interface {
	Send(*PeerSeenEvent) error
	grpc.ServerStream
}

type eventEmitterEmitServer struct {
	grpc.ServerStream
}

func (x *eventEmitterEmitServer) Send(m *PeerSeenEvent) error {
	return x.ServerStream.SendMsg(m)
}

// EventEmitter_ServiceDesc is the grpc.ServiceDesc for EventEmitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventEmitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "y7_wiredns_sensor_v1.EventEmitter",
	HandlerType: (*EventEmitterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Emit",
			Handler:       _EventEmitter_Emit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
